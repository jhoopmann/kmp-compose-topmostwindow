/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

val targetJvmPlatform: String = project.findProperty("targetJvmPlatform")?.toString() ?: "macos"

group = "de.jhoopmann.topmostwindow.compose"
version = "1.0.1"

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.jetbrains.compose)
    id("maven-publish")
}

publishing {
    repositories {
        maven {
            name = "GithubKmpTopMostWindow"
            url = uri("https://maven.pkg.github.com/jhoopmann/kmp-compose-topmostwindow")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        create<MavenPublication>("targetJvmPlatform") {
            groupId = "de.jhoopmann.topmostwindow.compose"
            artifactId = "kmp-compose-topmostwindow-$targetJvmPlatform"
            version = project.version.toString()

            afterEvaluate {
                artifact(tasks.getByName("${targetJvmPlatform}Jar")) {
                    classifier = null
                }
                artifact(tasks.getByName("allMetadataJar")) {
                    classifier = "metadata"
                }
            }
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    google()
    mavenCentral()

    maven {
        name = "GithubKmpTopmostWindow"
        url = uri("https://maven.pkg.github.com/jhoopmann/kmp-topmostwindow")
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

kotlin {
    jvm(targetJvmPlatform) {
        compilations.all {
            kotlinOptions.jvmTarget = "21"
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation(kotlin("reflect"))
                implementation(compose.ui)
                implementation(libs.androidx.lifecycle.runtime.compose)
                implementation("${libs.kmp.topmostwindow.get().group}:${libs.kmp.topmostwindow.get().name}-${targetJvmPlatform}:${libs.kmp.topmostwindow.get().version}")
            }
        }

        macosMain {

        }

        linuxMain {

        }

        mingwMain {

        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
